resps <- resps %>%
filter(door > 0) # we only care about samples in which people hovered or clicked on a door
### find the important events
resps <- resps %>%
mutate(on = c(onset[[1]],
case_when(diff(open_d) != 0 ~ onset[2:length(onset)],
diff(door) != 0 ~ onset[2:length(onset)],
.default = NA))) %>%
mutate(off = c(case_when(diff(open_d) != 0 ~ onset[1:length(onset) - 1],
diff(door) != 0 ~ onset[1:length(onset) - 1],
.default = NA),
onset[[length(onset)]])) %>%
filter(!is.na(on) | !is.na(off)) %>%
mutate(off = c(off[2:length(off)], NA)) %>%
filter(!is.na(on)) %>%
mutate(off = case_when(!is.na(off) ~ off, is.na(off) ~ c(on[2:length(on)], NA), .default = NA)) # if two onsets occured back-to-back, use the second onset as the first offset
trials <- unique(resps$t)
resps <- resps %>%
mutate(subses = case_when(t %in% trials[1:round(length(trials) / 2)] ~ 1, .default = 2), .after=str_split_i(ses, '-', 1)) # 2
length(unique(resps$t))
tmp = resps
ons$trial_start = ons$on
ons$on <- NULL
resps <- inner_join(resps, ons, by=c('sub', 'ses', 't', 'context')) %>%
mutate(on = on-trial_start,
off = off-trial_start) %>%
select(!trial_start)
ons
# find the time of target offset for each trial
# and set it as the onset for the next trial
ons <- resps %>% #
group_by(sub, ses, t, context) %>%
summarise(on = max(onset)) %>%
mutate(t = t+1) %>%
select(!context)
contexts <- resps %>% # preserve contexts to put back with ons info
group_by(sub, ses, t, context) %>%
select(sub, ses, t, context) %>%
mutate(change=t != lag(t, default=first(t))) %>%
filter(change | row_number() == 1) %>%
select(-change)
# this gives me the original context info
ons <- bind_rows(ons, tibble(sub=resps$sub[1], ses=resps$ses[1],
t=1, context=resps$context[1],
on=resps$onset[1])) %>%
ungroup() %>%
filter(t < max(t)) %>%
arrange(t)
ons <- inner_join(ons %>% select(!context),
contexts, by=c('sub', 'ses', 't'))
resps <- resps %>%
filter(door > 0) # we only care about samples in which people hovered or clicked on a door
unique(resps$)
unique(resps$t)
ons
### find the important events
resps <- resps %>%
mutate(on = c(onset[[1]],
case_when(diff(open_d) != 0 ~ onset[2:length(onset)],
diff(door) != 0 ~ onset[2:length(onset)],
.default = NA))) %>%
mutate(off = c(case_when(diff(open_d) != 0 ~ onset[1:length(onset) - 1],
diff(door) != 0 ~ onset[1:length(onset) - 1],
.default = NA),
onset[[length(onset)]])) %>%
filter(!is.na(on) | !is.na(off)) %>%
mutate(off = c(off[2:length(off)], NA)) %>%
filter(!is.na(on)) %>%
mutate(off = case_when(!is.na(off) ~ off, is.na(off) ~ c(on[2:length(on)], NA), .default = NA)) # if two onsets occured back-to-back, use the second onset as the first offset
trials <- unique(resps$t)
resps <- resps %>%
mutate(subses = case_when(t %in% trials[1:round(length(trials) / 2)] ~ 1, .default = 2), .after=str_split_i(ses, '-', 1)) # 2
ons$trial_start = ons$on
ons$on <- NULL
resps <- inner_join(resps, ons, by=c('sub', 'ses', 't', 'context')) %>%
mutate(on = on-trial_start,
off = off-trial_start) %>%
select(!trial_start)
length(unique(resps$t))
rm(list=ls())
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
# amended by KG. 2025, for the 'doors' project in 2025
### sources
library(tidyverse)
library(zeallot) #unpack/destructure with %<-%
library(stringr)
source(file.path("src", "get_subs.R"))
source(file.path("src", "get_switch.R"))
source(file.path("src", "get_data.R"))
source(file.path("src","get_setting_stability.R"))
source(file.path("src","get_transition_probabilities.R"))
source(file.path("src","get_learned_doors.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "data_analysis_touchy"
exp <- "flexibility"
sess <- c("ses-learn","ses-train","ses-test")
# if (exp == "multitasking") {
#   sess <- c('ses-mts', "ses-learn","ses-train","ses-test")
# } else {
#   sess <- c("ses-learn","ses-train","ses-test")
# }
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
file_path <- "~/Downloads"
exp_path <- str_glue("/{exp}/{version}")
data_path <- file.path(file_path + exp_path)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
files <- list.files(data_path, pattern = str_glue('.*(beh.tsv)'), recursive = T)
subs <- unique(str_split_i(files, "/", 1))
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), subses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), door_oc = integer(), on = numeric(), off = numeric(),
switch = integer(), train_type = integer())
# create empty data frame for the response time data
grp_ons <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), on = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
train_doors <- NA # ???
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data$resps) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
grp_ons <- rbind(grp_ons, data$ons) # add event onset times to data frame
}
}
# track whether context-incorrect clicks in the test phase land on doors that were learned in the train phase
# if(exp=="exp_lt"){
#   door_lc <- get_learned_doors(grp_data)
#   grp_data <- grp_data %>% add_column(door_lc = door_lc, .after="door_oc")
# }else{
#   grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
# }
grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
grp_data <- get_setting_stability(grp_data) # track when they changed context into the correct or other context's door set - KG: this line may not be necessary
grp_data <- grp_data %>% mutate(door_nc = case_when(door_cc==1 ~ 0, door_oc == 1 ~ 0, .default=1), .after="door_oc")
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
View(grp_data %>% filter(sub == 10 & ses == 3))
res <- grp_data %>%
group_by(sub, ses, subses, t, context, train_type) %>%
summarise(
switch = max(switch), n_clicks = n(), n_cc = sum(door_cc), n_oc = sum(door_oc), n_lc = sum(door_lc), n_nc = sum(door_nc),
setting_sticks = select_oc[1],
setting_slips = max(select_oc_late),
context_changes = sum(select_cc)+sum(select_oc),
accuracy = n_cc / n_clicks,
setting_errors = n_oc / n_clicks,
general_errors = n_nc / n_clicks,
learned_setting_errors = n_lc / n_clicks
)
head(res)
# calculate context change rates - below is not needed for 2025 exp, as explicit cues used
# res$context_changes[intersect(which(res$switch==1),which(res$ses==2))] <- res$context_changes[intersect(which(res$switch==1),which(res$ses==2))]-1
rt <- grp_data %>%
group_by(sub, ses, subses, t, context, train_type) %>%
filter(door_cc == 1) %>%
summarise(rt = min(on)) # time to first correct click onset - KG: changed from offset, which was used in previous study
head(rt)
head(res)
# rt <- inner_join(grp_ons, rt, by=c('sub', 'ses', 't', 'context')) # K.G commented out, as info is already in units relative to trial onset
res$rt <- rt$rt
res$win <- 4-res$n_clicks >= 0
# make sure we can select just the first-click-correct trials to calculate avg rt over trials
grp_data <- grp_data %>% ungroup()
res$first_click_correct <- grp_data %>%
mutate(diff_cc = diff(c(1,door_cc))) %>%
mutate(diff_t = diff(c(0,t))) %>%
mutate(first_click_correct = case_when(diff_cc == 0 & diff_t == 1 ~ 1, .default = 0)) %>%
group_by(sub, ses, subses, t, context, train_type) %>%
summarise(first_click_correct = first_click_correct[1]) %>%
pull(first_click_correct)
View(res %>% filter(sub == 10 & ses == 3))
View(res %>% filter(sub == 10 & ses == 3) %>% select(sub, t, switch, n_cc, first_click_correct))
View(grp_data %>% filter(sub == 10 & ses == 3) %>% select(sub, t, switch, n_cc, first_click_correct))
head(grp_data)
View(grp_data %>% filter(sub == 3 & ses == 3))
View(grp_data %>% filter(sub == 3 & ses == 3) %>% select(sub, t, switch, door_cc)
)
View(grp_data %>% filter(sub == 3 & ses == 3) %>% select(sub, t, switch, door_cc))
View(res %>% filter(sub == 10 & ses == 3) %>% select(sub, t, switch, n_cc, first_click_correct))
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
# amended by KG. 2025, for the 'doors' project in 2025
### sources
library(tidyverse)
library(zeallot) #unpack/destructure with %<-%
library(stringr)
source(file.path("src", "get_subs.R"))
source(file.path("src", "get_switch.R"))
source(file.path("src", "get_data.R"))
source(file.path("src","get_setting_stability.R"))
source(file.path("src","get_transition_probabilities.R"))
source(file.path("src","get_learned_doors.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "data_analysis_touchy"
exp <- "flexibility"
sess <- c("ses-learn","ses-train","ses-test")
# if (exp == "multitasking") {
#   sess <- c('ses-mts', "ses-learn","ses-train","ses-test")
# } else {
#   sess <- c("ses-learn","ses-train","ses-test")
# }
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
file_path <- "~/Downloads"
exp_path <- str_glue("/{exp}/{version}")
data_path <- file.path(file_path + exp_path)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
files <- list.files(data_path, pattern = str_glue('.*(beh.tsv)'), recursive = T)
subs <- unique(str_split_i(files, "/", 1))
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), subses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), door_oc = integer(), on = numeric(), off = numeric(),
switch = integer(), train_type = integer())
# create empty data frame for the response time data
grp_ons <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), on = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
train_doors <- NA # ???
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data$resps) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
grp_ons <- rbind(grp_ons, data$ons) # add event onset times to data frame
}
}
# track whether context-incorrect clicks in the test phase land on doors that were learned in the train phase
# if(exp=="exp_lt"){
#   door_lc <- get_learned_doors(grp_data)
#   grp_data <- grp_data %>% add_column(door_lc = door_lc, .after="door_oc")
# }else{
#   grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
# }
grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
grp_data <- get_setting_stability(grp_data) # track when they changed context into the correct or other context's door set - KG: this line may not be necessary
grp_data <- grp_data %>% mutate(door_nc = case_when(door_cc==1 ~ 0, door_oc == 1 ~ 0, .default=1), .after="door_oc")
# save the formatted data
fnl <- file.path(project_path, "res", paste(paste(exp, "evt", sep = "_"), ".csv", sep = ""))
write_csv(grp_data, fnl)
### extract accuracy and response time averages from event data
# by trial
res <- grp_data %>%
group_by(sub, ses, subses, t, context, train_type) %>%
summarise(
switch = max(switch), n_clicks = n(), n_cc = sum(door_cc), n_oc = sum(door_oc), n_lc = sum(door_lc), n_nc = sum(door_nc),
setting_sticks = select_oc[1],
setting_slips = max(select_oc_late),
context_changes = sum(select_cc)+sum(select_oc),
accuracy = n_cc / n_clicks,
setting_errors = n_oc / n_clicks,
general_errors = n_nc / n_clicks,
learned_setting_errors = n_lc / n_clicks
)
# re-label exp_lt test phase "switch" trials as stay trials
# if (exp == "exp_lt"){
#   res <- res %>%
#     mutate(switch = case_when(switch==1 & ses==3 ~ 0, .default = switch))
# }
# calculate context change rates - below is not needed for 2025 exp, as explicit cues used
# res$context_changes[intersect(which(res$switch==1),which(res$ses==2))] <- res$context_changes[intersect(which(res$switch==1),which(res$ses==2))]-1
rt <- grp_data %>%
group_by(sub, ses, subses, t, context, train_type) %>%
filter(door_cc == 1) %>%
summarise(rt = min(on)) # time to first correct click onset - KG: changed from offset, which was used in previous study
# rt <- inner_join(grp_ons, rt, by=c('sub', 'ses', 't', 'context')) # K.G commented out, as info is already in units relative to trial onset
res$rt <- rt$rt
res$win <- 4-res$n_clicks >= 0
View(grp_data)
View(grp_data %>% filter(select_oc | select_oc_late))
View(grp_data %>% filter(select_oc & !select_oc_late))
View(grp_data %>% filter(sub == 10 & ses == 3))
View(grp_data %>% filter(sub == 10 & ses == 3) %>% select(sub, ses, t, context, door_oc, door_oc, door_nc, scca, sccb, select_cc, soca, socb, select_oc, select_oc_late))
View(grp_data %>% filter(sub == 10 & ses == 3) %>% select(sub, ses, t, context, door_cc, door_oc, door_nc, scca, sccb, select_cc, soca, socb, select_oc, select_oc_late))
# lydia barnes, march 2024 this script extracts, formats, and summarises data from the 'doors'
# project.
# amended by KG. 2025, for the 'doors' project in 2025
### sources
library(tidyverse)
library(zeallot) #unpack/destructure with %<-%
library(stringr)
source(file.path("src", "get_subs.R"))
source(file.path("src", "get_switch.R"))
source(file.path("src", "get_data.R"))
source(file.path("src","get_setting_stability.R"))
source(file.path("src","get_transition_probabilities.R"))
source(file.path("src","get_learned_doors.R"))
### settings
# !you will want to update these settings a lot during piloting, when the task code or the way you
# test changes, or when you test participants on different subsets of the task phases
version <- "data_analysis_touchy"
exp <- "flexibility"
sess <- c("ses-learn","ses-train","ses-test")
# if (exp == "multitasking") {
#   sess <- c('ses-mts', "ses-learn","ses-train","ses-test")
# } else {
#   sess <- c("ses-learn","ses-train","ses-test")
# }
### paths
# !if you open the project thru doors.Rproj, your working directory will automatically be the
# project path
project_path <- getwd()
if (!dir.exists(file.path(project_path, "res"))) {
# check that the results directory exists. if it doesn't, create it.
dir.create(file.path(project_path, "res"))
}
# !you will need to change the data path to match the location of OneDrive on your personal
# computer
file_path <- "~/Downloads"
exp_path <- str_glue("/{exp}/{version}")
data_path <- file.path(file_path + exp_path)
if (!dir.exists(data_path)) {
stop(paste0(data_path, " does not exist"))
}
### load an up-to-date list of participants
files <- list.files(data_path, pattern = str_glue('.*(beh.tsv)'), recursive = T)
subs <- unique(str_split_i(files, "/", 1))
### extract events from the raw data
# make an empty data frame with all the variables (columns) that we will want
grp_data <- data.frame(
sub = integer(), ses = integer(), subses = integer(), t = integer(), context = integer(), door = integer(),
door_cc = integer(), door_oc = integer(), on = numeric(), off = numeric(),
switch = integer(), train_type = integer())
# create empty data frame for the response time data
grp_ons <- data.frame(
sub = integer(), ses = integer(), t = integer(), context = integer(), on = integer()
)
# for each subject and session, use the function 'get_data' to load their raw data and attach it to
# our 'grp_data' data frame with one measurement (row) per event (click or hover)
for (sub in subs) {
print(sub)
sid <- as.numeric(substring(sub,5,7))
for (ses in sess) {
train_type <- NA
context_one_doors <- NA
train_doors <- NA # ???
if (ses == "ses-test") {
train_type <- grp_data %>%
filter(sub == sid, ses == 2) %>%
select(train_type) %>%
unique() %>%
pull()
train_doors <- grp_data %>%
filter(sub==sid,ses==ses,door_cc==1) %>%
select(door,context) %>%
unique()
}
data <- get_data(data_path, exp, sub, ses, train_type, train_doors) # load and format raw data
grp_data <- rbind(grp_data, data$resps) # add to the 'grp_data' data frame so we end up with all subjects and sessions in one spreadsheet
grp_ons <- rbind(grp_ons, data$ons) # add event onset times to data frame
}
}
# track whether context-incorrect clicks in the test phase land on doors that were learned in the train phase
# if(exp=="exp_lt"){
#   door_lc <- get_learned_doors(grp_data)
#   grp_data <- grp_data %>% add_column(door_lc = door_lc, .after="door_oc")
# }else{
#   grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
# }
grp_data <- grp_data %>% mutate(door_lc = c(kronecker(matrix(1, nrow(grp_data), 1), NA)), .after="door_oc")
data <- grp_data %>% filter(sub == 10 & ses == 3)
View(data)
tmp = data
data = tmp %>% filter(t == 2)
with(data, diff(c(1,door_cc)))
data <- data %>% mutate(case_when(diff(1,door_cc) >0~1, .default=0))
data
data <- data %>%  mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0))
data
data <- data %>%     mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 1 at the front guarantees that if you are already in the current context, you will not get a '1' in scca
sccb = case_when(diff(c(0,door_cc))>0~1,.default=0)
)
data
with(data, diff(c(0,door_cc))
)
data <- data %>%
group_by(sub,ses,t) %>%
mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 1 at the front guarantees that if you are already in the current context, you will not get a '1' in scca
sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 0 at the front guarantees that if you start in the current context, you will get a '1' in scca
select_cc = case_when(ses==2 & switch==1 ~ sccb, .default=scca))
data
with(data, diff(c(0,door_oc))
)
data <- data %>%
group_by(sub,ses,t) %>%
mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 1 at the front guarantees that if you are already in the current context, you will not get a '1' in scca
sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 0 at the front guarantees that if you start in the current context, you will get a '1' in scca
select_cc = case_when(ses==2 & switch==1 ~ sccb, .default=scca), #changes into correct context - if this is a trial where there was a switch, then you use sccb, where there is a 1 if you are hitting cc immediately
soca = case_when(diff(c(0,door_oc))>0~1,.default=0), # this does the opposite to the above - if you start the trial hitting doors from the other context then put a 1
socb = case_when(diff(c(1,door_oc))>0~1,.default=0))
data
data <- data %>%
group_by(sub,ses,t) %>%
mutate(
scca = case_when(diff(c(1,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 1 at the front guarantees that if you are already in the current context, you will not get a '1' in scca
sccb = case_when(diff(c(0,door_cc))>0~1,.default=0), # if you go from not selecting a door from the current context to doing so, put a 1 - putting a 0 at the front guarantees that if you start in the current context, you will get a '1' in scca
select_cc = case_when(ses==2 & switch==1 ~ sccb, .default=scca), #changes into correct context - if this is a trial where there was a switch, then you use sccb, where there is a 1 if you are hitting cc immediately
soca = case_when(diff(c(0,door_oc))>0~1,.default=0), # this does the opposite to the above - if you start the trial hitting doors from the other context then put a 1
socb = case_when(diff(c(1,door_oc))>0~1,.default=0), #
select_oc = case_when(ses==2 & switch==1 ~ socb, .default=soca), #changes into other context
select_oc_late = case_when(diff(c(0,t))==1~0,.default=select_oc) # if it is the first event in the trial then put a 0, if not put that they selected the other context
)
data
View(data)
with(data, diff(c(0,t))
)
with(data, diff(c(1,door_cc)))
with(data, diff(c(1,door_cc))) > 0
with(data, diff(c(0,door_cc))
)
with(data, diff(c(0,door_cc))) > 0
diff(c(0,1))
diff(c(0,0))
diff(c(1,1))
diff(c(0,1))
diff(c(0,0))
data <- grp_data %>% filter(sub == 10 & ses == 3)
head(data)
get_idx_oc_prior_first_cc <- function(trial_dat){
with(trial_dat, min(which(door_cc)))
}
trial_dat <- data %>% filter(t==2)
get_idx_oc_prior_first_cc(trial_dat = )
get_idx_oc_prior_first_cc(trial_dat)
with(trial_dat, which(door_cc))
with(trial_dat, which(door_cc > 0))
get_idx_oc_prior_first_cc <- function(trial_dat){
with(trial_dat, min(which(door_cc > 0)))
}
get_idx_oc_prior_first_cc(trial_dat = )
get_idx_oc_prior_first_cc(trial_dat)
get_n_obs_for_trial <- function(trial_dat){
nrow(trial_dat)
}
get_n_obs_for_trial(trial_dat)
get_idx_first_cc <- function(trial_dat){
with(trial_dat, min(which(door_cc > 0)))
}
trial_dat$sticks <- 0
trial_dat$slips <- 0
trial_dat
first_correct <- get_idx_first_cc(trial_dat)
1:(first_correct-1)
